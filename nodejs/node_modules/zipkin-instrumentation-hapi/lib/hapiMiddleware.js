"use strict";

var _require = require('zipkin'),
    _require$option = _require.option,
    Some = _require$option.Some,
    None = _require$option.None,
    Instrumentation = _require.Instrumentation;

var url = require('url');

var pkg = require('../package.json');

function headerOption(headers, header) {
  var val = headers[header.toLowerCase()];

  if (val != null) {
    return new Some(val);
  } else {
    return None;
  }
}

exports.register = function (server, _ref) {
  var tracer = _ref.tracer,
      serviceName = _ref.serviceName,
      _ref$port = _ref.port,
      port = _ref$port === void 0 ? 0 : _ref$port;
  var instrumentation = new Instrumentation.HttpServer({
    tracer: tracer,
    serviceName: serviceName,
    port: port
  });
  if (tracer == null) throw new Error('No tracer specified');
  var sentinelTraceId = tracer.id;
  server.ext('onRequest', function (request, h) {
    var headers = request.headers;
    var readHeader = headerOption.bind(null, headers);
    var traceId = tracer.scoped(function () {
      return instrumentation.recordRequest(request.method, url.format(request.url), readHeader);
    });
    Object.defineProperty(request, '_trace_id', {
      configurable: false,
      get: function get() {
        return traceId;
      }
    });
    return h["continue"];
  });
  server.ext('onPreHandler', function (request, h) {
    var traceId = request._trace_id;
    if (traceId) tracer.setId(traceId); // manually start scope

    return h["continue"];
  });
  server.ext('onPreResponse', function (request, h) {
    var traceId = request._trace_id;
    if (!traceId) return h["continue"]; // TODO: make a realistic test that could skip this

    tracer.setId(sentinelTraceId); // stop any scope

    var response = request.response;
    var statusCode = response.isBoom ? response.output.statusCode : response.statusCode;
    tracer.scoped(function () {
      return instrumentation.recordResponse(traceId, statusCode);
    });
    return h["continue"];
  });
};

exports.name = 'zipkin-instrumentation-hapi';
exports.pkg = pkg;